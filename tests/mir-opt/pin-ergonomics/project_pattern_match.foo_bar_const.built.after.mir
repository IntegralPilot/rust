// MIR for `foo_bar_const` after built

fn foo_bar_const(_1: Pin<&Foo<Bar<T, U>, Bar<T, U>>>) -> () {
    debug foo => _1;
    let mut _0: ();
    let _2: std::pin::Pin<&T>;
    let _3: std::pin::Pin<&U>;
    let _4: std::pin::Pin<&T>;
    let _5: std::pin::Pin<&U>;
    let mut _6: &T;
    let mut _7: &U;
    let mut _8: &T;
    let mut _9: &U;
    scope 1 {
        debug x => _2;
        debug y => _3;
        debug z => _4;
        debug w => _5;
    }

    bb0: {
        PlaceMention(_1);
        StorageLive(_2);
        _6 = &(((*(_1.0: &Foo<Bar<T, U>, Bar<T, U>>)).0: Bar<T, U>).0: T);
        _2 = Pin::<&T> { pointer: move _6 };
        StorageLive(_3);
        _7 = &(((*(_1.0: &Foo<Bar<T, U>, Bar<T, U>>)).0: Bar<T, U>).1: U);
        _3 = Pin::<&U> { pointer: move _7 };
        StorageLive(_4);
        _8 = &(((*(_1.0: &Foo<Bar<T, U>, Bar<T, U>>)).1: Bar<T, U>).0: T);
        _4 = Pin::<&T> { pointer: move _8 };
        StorageLive(_5);
        _9 = &(((*(_1.0: &Foo<Bar<T, U>, Bar<T, U>>)).1: Bar<T, U>).1: U);
        _5 = Pin::<&U> { pointer: move _9 };
        _0 = const ();
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_2);
        return;
    }

    bb1: {
        FakeRead(ForMatchedPlace(None), _1);
        unreachable;
    }
}
